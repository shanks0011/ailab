#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> getNextStates(pair<int, int> curr) {
    int x = curr.first, y = curr.second;
    vector<pair<int, int>> nextStates;

    // Fill 4-liter jar
    nextStates.push_back({4, y});
    
    // Fill 3-liter jar
    nextStates.push_back({x, 3});

    // Empty 4-liter jar
    nextStates.push_back({0, y});
    
    // Empty 3-liter jar
    nextStates.push_back({x, 0});

    // Pour water from the 3-liter jar to 4-liter jar
    if (x + y >= 4) {
        nextStates.push_back({4, y - (4 - x)});
    } else {
        nextStates.push_back({x + y, 0});
    }

    // Pour water from the 4-liter jar to 3-liter jar
    if (x + y >= 3) {
        nextStates.push_back({x - (3 - y), 3});
    } else {
        nextStates.push_back({0, x + y});
    }

    return nextStates;
}

bool dfs(pair<int, int> curr, pair<int, int> end, vector<pair<int, int>>& path, set<pair<int, int>>& visited) {
    if (curr == end) {
        return true;
    }

    visited.insert(curr);
    vector<pair<int, int>> nextStates = getNextStates(curr);

    for (pair<int, int> next : nextStates) {
        // If next state is not visited
        if (visited.find(next) == visited.end()) {
            path.push_back(next);
            if (dfs(next, end, path, visited)) {
                return true;
            }
            path.pop_back(); // Backtrack
        }
    }
    return false;
}

int main() {
    pair<int, int> start = {0, 0};
    pair<int, int> goal = {2, 0};
    vector<pair<int, int>> path = {start};
    set<pair<int, int>> visited;

    if (dfs(start, goal, path, visited)) {
        cout << "Possible solution is: " << endl;
        for (pair<int, int> it : path) {
            cout << it.first << " , " << it.second << endl;
        }
    } else {
        cout << "No possible Solution." << endl;
    }

    return 0;
}
