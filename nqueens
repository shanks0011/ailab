#include <iostream>
#include <vector>
#include <string>
using namespace std;

void addSolution(vector<vector<char>> &board, int n, vector<vector<string>> &ans) {
    vector<string> temp;
    for (int i = 0; i < n; i++) {
        string output = "";
        for (int j = 0; j < n; j++) {
            output.push_back(board[i][j]);
        }
        temp.push_back(output);
    }
    ans.push_back(temp);
    
}

bool isSafe(int row, int col, vector<vector<char>> &board, int n) {
    // check row is safe to go;
    int x = row;
    int y = col;
    while (y >= 0) {
        if (board[x][y] == 'Q') {
            return false;
        }
        y--;
    }

    // check upper diagonal left
    x = row;
    y = col;
    while (y >= 0 && x >= 0) {
        if (board[x][y] == 'Q') {
            return false;
        }
        y--;
        x--;
    }

    // check lower diagonal left;
    x = row;
    y = col;
    while (y >= 0 && x < n) {
        if (board[x][y] == 'Q') {
            return false;
        }
        y--;
        x++;
    }
    return true;
}

void solve(vector<vector<char>> &board, int col, int n, vector<vector<string>> &ans) {
    if (col == n) {
        addSolution(board, n, ans);
        return;
    }

    for (int row = 0; row < n; row++) {
        if (isSafe(row, col, board, n)) {
            board[row][col] = 'Q';
            solve(board, col + 1, n, ans);
            board[row][col] = '.';
        }
    }
}

vector<vector<string>> solveNQueens(int n) {
    vector<vector<char>> board(n, vector<char>(n, '.'));
    vector<vector<string>> ans;
    solve(board, 0, n, ans);
    return ans;
}

int main() {
    int n;
    cout << "Enter the value of n: ";
    cin >> n;

    vector<vector<string>> solutions = solveNQueens(n);

    cout << "The solutions are: " << endl;
    for (const auto& solution : solutions) {
        for (const auto& row : solution) {
            cout << row << endl;
        }
        cout << endl;
    }

    return 0;
}
