#include<bits/stdc++.h>
using namespace std;

void printState(vector<vector<int>> state){
    for(int i = 0; i<state.size(); i++){
        for(int j = 0; j<state[i].size(); j++){
            cout << state[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

int countMisplaced(vector<vector<int>> &curr, vector<vector<int>> &goal){
    int cnt = 0;
    for(int i = 0; i<curr.size(); i++){
        for(int j = 0; j<curr[i].size(); j++){
            if(curr[i][j] != 0 && (curr[i][j] != goal[i][j])){
                cnt++;
            }
        }
    }
    return cnt;
}

pair<int,int> findBlank(vector<vector<int>> curr){
    for(int i = 0; i<curr.size(); i++){
        for(int j = 0; j<curr[i].size(); j++){
            if(curr[i][j] == 0){
                return {i, j};
            }
        }
    }
    return {-1, -1};
}

void bestFirstSearch(vector<vector<int>> &start, vector<vector<int>> &goal){
    priority_queue<pair<int, vector<vector<int>>>, vector<pair<int, vector<vector<int>>>>, greater<pair<int, vector<vector<int>>>>> pq;
    set<vector<vector<int>>> visited;
    visited.insert(start);
    int h = countMisplaced(start, goal);
    pq.push({h, start});

    // row and column movement for right, down, left, up
    int delrow[] = {0, 1, 0, -1};
    int delcol[] = {1, 0, -1, 0};

    while(!pq.empty()){
        vector<vector<int>> curr = pq.top().second;
        pq.pop();
        printState(curr);

        h = countMisplaced(curr, goal);

        if(h==0){
            cout << "Solution found" << endl;
            return;
        }

        pair<int,int> blank = findBlank(curr);
        int row = blank.first;
        int col = blank.second;

        for(int i = 0; i<4; i++){
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            if(nrow>=0 && nrow<3 && ncol >=0 && ncol <3){
                swap(curr[row][col], curr[nrow][ncol]);
                // if it not visted till now
                if(visited.find(curr)==visited.end()){
                    h = countMisplaced(curr, goal);
                    pq.push({h, curr});
                    visited.insert(curr);
                }
                swap(curr[row][col], curr[nrow][ncol]);
            }
        }
        
    }
    cout << "No Solution Found !" << endl;

}

int main(){
    vector<vector<int>> start = {{2, 8, 3},
                                 {1, 6, 4},
                                 {7, 0, 5}};
    vector<vector<int>> goal = {{1, 2, 3},
                                 {8, 0, 4},
                                 {7, 6, 5}};
    
    cout << "Initital State : " << endl;
    printState(start);
    cout << endl << " Final STate : " << endl;
    printState(goal);

    cout << "Solving Puzzle using best First Search : " <<endl;
    bestFirstSearch(start, goal);
    return 0;
}
